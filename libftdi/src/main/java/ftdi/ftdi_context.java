package ftdi;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import ftdi.FtdiLibrary.ftdi_eeprom;
import ftdi.FtdiLibrary.libusb_context;
import ftdi.FtdiLibrary.libusb_device_handle;
import java.util.Arrays;
import java.util.List;
/**
 * \brief Main context structure for all libftdi functions.<br>
 * Do not access directly if possible.<br>
 * <i>native declaration : /usr/include/sys/time.h:366</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ftdi_context extends Structure {
	/**
	 * libusb's context<br>
	 * C type : libusb_context*
	 */
	public libusb_context usb_ctx;
	/**
	 * libusb's usb_dev_handle<br>
	 * C type : libusb_device_handle*
	 */
	public libusb_device_handle usb_dev;
	/** usb read timeout */
	public int usb_read_timeout;
	/** usb write timeout */
	public int usb_write_timeout;
	/**
	 * FTDI chip type<br>
	 * @see ftdi_chip_type<br>
	 * C type : ftdi_chip_type
	 */
	public int type;
	/** baudrate */
	public int baudrate;
	/** bitbang mode state */
	public byte bitbang_enabled;
	/**
	 * pointer to read buffer for ftdi_read_data<br>
	 * C type : unsigned char*
	 */
	public Pointer readbuffer;
	/** read buffer offset */
	public int readbuffer_offset;
	/** number of remaining data in internal read buffer */
	public int readbuffer_remaining;
	/** read buffer chunk size */
	public int readbuffer_chunksize;
	/** write buffer chunk size */
	public int writebuffer_chunksize;
	/** maximum packet size. Needed for filtering modem status bytes every n packets. */
	public int max_packet_size;
	/**
	 * FT2232C interface number: 0 or 1<br>
	 * 0 or 1
	 */
	public int interface$;
	/**
	 * FT2232C index number: 1 or 2<br>
	 * 1 or 2
	 */
	public int index;
	/** FT2232C end points: 1 or 2 */
	public int in_ep;
	/** 1 or 2 */
	public int out_ep;
	/** Bitbang mode. 1: (default) Normal bitbang mode, 2: FT2232C SPI bitbang mode */
	public byte bitbang_mode;
	/**
	 * Decoded eeprom structure<br>
	 * C type : ftdi_eeprom*
	 */
	public ftdi_eeprom eeprom;
	/**
	 * String representation of last error<br>
	 * C type : char*
	 */
	public Pointer error_str;
	/**
	 * Defines behavior in case a kernel module is already attached to the device<br>
	 * @see ftdi_module_detach_mode<br>
	 * C type : ftdi_module_detach_mode
	 */
	public int module_detach_mode;
	public ftdi_context() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("usb_ctx", "usb_dev", "usb_read_timeout", "usb_write_timeout", "type", "baudrate", "bitbang_enabled", "readbuffer", "readbuffer_offset", "readbuffer_remaining", "readbuffer_chunksize", "writebuffer_chunksize", "max_packet_size", "interface$", "index", "in_ep", "out_ep", "bitbang_mode", "eeprom", "error_str", "module_detach_mode");
	}
	public static class ByReference extends ftdi_context implements Structure.ByReference {
		
	};
	public static class ByValue extends ftdi_context implements Structure.ByValue {
		
	};
}

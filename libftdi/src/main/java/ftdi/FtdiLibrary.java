package ftdi;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.ptr.ShortByReference;

import ftdi.ftdi_version_info.ByValue;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.nio.ShortBuffer;
/**
 * JNA Wrapper for library <b>ftdi</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface FtdiLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "ftdi1";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(FtdiLibrary.JNA_LIBRARY_NAME);
	public static final FtdiLibrary INSTANCE = (FtdiLibrary)Native.loadLibrary(FtdiLibrary.JNA_LIBRARY_NAME, FtdiLibrary.class);
	/**
	 * Values for the first argument to `getitimer' and `setitimer'.<br>
	 * <i>native declaration : /usr/include/sys/time.h:90</i><br>
	 * enum values
	 */
	public static interface __itimer_which {
		/**
		 * Timers run in real time.<br>
		 * <i>native declaration : /usr/include/sys/time.h:93</i>
		 */
		public static final int ITIMER_REAL = 0;
		/**
		 * Timers run only when the process is executing.<br>
		 * <i>native declaration : /usr/include/sys/time.h:96</i>
		 */
		public static final int ITIMER_VIRTUAL = 1;
		/**
		 * Timers run when the process is executing and when<br>
		 * the system is executing on behalf of the process.<br>
		 * <i>native declaration : /usr/include/sys/time.h:100</i>
		 */
		public static final int ITIMER_PROF = 2;
	};
	/**
	 * FTDI chip type<br>
	 * <i>native declaration : /usr/include/sys/time.h:193</i><br>
	 * enum values
	 */
	public static interface ftdi_chip_type {
		/** <i>native declaration : /usr/include/sys/time.h:193</i> */
		public static final int TYPE_AM = 0;
		/** <i>native declaration : /usr/include/sys/time.h:193</i> */
		public static final int TYPE_BM = 1;
		/** <i>native declaration : /usr/include/sys/time.h:193</i> */
		public static final int TYPE_2232C = 2;
		/** <i>native declaration : /usr/include/sys/time.h:193</i> */
		public static final int TYPE_R = 3;
		/** <i>native declaration : /usr/include/sys/time.h:193</i> */
		public static final int TYPE_2232H = 4;
		/** <i>native declaration : /usr/include/sys/time.h:193</i> */
		public static final int TYPE_4232H = 5;
		/** <i>native declaration : /usr/include/sys/time.h:193</i> */
		public static final int TYPE_232H = 6;
	};
	/**
	 * Parity mode for ftdi_set_line_property()<br>
	 * <i>native declaration : /usr/include/sys/time.h:195</i><br>
	 * enum values
	 */
	public static interface ftdi_parity_type {
		/** <i>native declaration : /usr/include/sys/time.h:195</i> */
		public static final int NONE = 0;
		/** <i>native declaration : /usr/include/sys/time.h:195</i> */
		public static final int ODD = 1;
		/** <i>native declaration : /usr/include/sys/time.h:195</i> */
		public static final int EVEN = 2;
		/** <i>native declaration : /usr/include/sys/time.h:195</i> */
		public static final int MARK = 3;
		/** <i>native declaration : /usr/include/sys/time.h:195</i> */
		public static final int SPACE = 4;
	};
	/**
	 * Number of stop bits for ftdi_set_line_property()<br>
	 * <i>native declaration : /usr/include/sys/time.h:197</i><br>
	 * enum values
	 */
	public static interface ftdi_stopbits_type {
		/** <i>native declaration : /usr/include/sys/time.h:197</i> */
		public static final int STOP_BIT_1 = 0;
		/** <i>native declaration : /usr/include/sys/time.h:197</i> */
		public static final int STOP_BIT_15 = 1;
		/** <i>native declaration : /usr/include/sys/time.h:197</i> */
		public static final int STOP_BIT_2 = 2;
	};
	/**
	 * Number of bits for ftdi_set_line_property()<br>
	 * <i>native declaration : /usr/include/sys/time.h:199</i><br>
	 * enum values
	 */
	public static interface ftdi_bits_type {
		/** <i>native declaration : /usr/include/sys/time.h:199</i> */
		public static final int BITS_7 = 7;
		/** <i>native declaration : /usr/include/sys/time.h:199</i> */
		public static final int BITS_8 = 8;
	};
	/**
	 * Break type for ftdi_set_line_property2()<br>
	 * <i>native declaration : /usr/include/sys/time.h:201</i><br>
	 * enum values
	 */
	public static interface ftdi_break_type {
		/** <i>native declaration : /usr/include/sys/time.h:201</i> */
		public static final int BREAK_OFF = 0;
		/** <i>native declaration : /usr/include/sys/time.h:201</i> */
		public static final int BREAK_ON = 1;
	};
	/**
	 * MPSSE bitbang modes<br>
	 * <i>native declaration : /usr/include/sys/time.h:204</i><br>
	 * enum values
	 */
	public static interface ftdi_mpsse_mode {
		/**
		 * < switch off bitbang mode, back to regular serial/FIFO<br>
		 * <i>native declaration : /usr/include/sys/time.h:206</i>
		 */
		public static final int BITMODE_RESET = 0x00;
		/**
		 * < classical asynchronous bitbang mode, introduced with B-type chips<br>
		 * <i>native declaration : /usr/include/sys/time.h:207</i>
		 */
		public static final int BITMODE_BITBANG = 0x01;
		/**
		 * < MPSSE mode, available on 2232x chips<br>
		 * <i>native declaration : /usr/include/sys/time.h:208</i>
		 */
		public static final int BITMODE_MPSSE = 0x02;
		/**
		 * < synchronous bitbang mode, available on 2232x and R-type chips<br>
		 * <i>native declaration : /usr/include/sys/time.h:209</i>
		 */
		public static final int BITMODE_SYNCBB = 0x04;
		/**
		 * < MCU Host Bus Emulation mode, available on 2232x chips<br>
		 * <i>native declaration : /usr/include/sys/time.h:210</i>
		 */
		public static final int BITMODE_MCU = 0x08;
		/**
		 * CPU-style fifo mode gets set via EEPROM<br>
		 * < Fast Opto-Isolated Serial Interface Mode, available on 2232x chips<br>
		 * <i>native declaration : /usr/include/sys/time.h:212</i>
		 */
		public static final int BITMODE_OPTO = 0x10;
		/**
		 * < Bitbang on CBUS pins of R-type chips, configure in EEPROM before<br>
		 * <i>native declaration : /usr/include/sys/time.h:213</i>
		 */
		public static final int BITMODE_CBUS = 0x20;
		/**
		 * < Single Channel Synchronous FIFO mode, available on 2232H chips<br>
		 * <i>native declaration : /usr/include/sys/time.h:214</i>
		 */
		public static final int BITMODE_SYNCFF = 0x40;
		/**
		 * < FT1284 mode, available on 232H chips<br>
		 * <i>native declaration : /usr/include/sys/time.h:215</i>
		 */
		public static final int BITMODE_FT1284 = 0x80;
	};
	/**
	 * Port interface for chips with multiple interfaces<br>
	 * <i>native declaration : /usr/include/sys/time.h:219</i><br>
	 * enum values
	 */
	public static interface ftdi_interface {
		/** <i>native declaration : /usr/include/sys/time.h:221</i> */
		public static final int INTERFACE_ANY = 0;
		/** <i>native declaration : /usr/include/sys/time.h:222</i> */
		public static final int INTERFACE_A = 1;
		/** <i>native declaration : /usr/include/sys/time.h:223</i> */
		public static final int INTERFACE_B = 2;
		/** <i>native declaration : /usr/include/sys/time.h:224</i> */
		public static final int INTERFACE_C = 3;
		/** <i>native declaration : /usr/include/sys/time.h:225</i> */
		public static final int INTERFACE_D = 4;
	};
	/**
	 * Automatic loading / unloading of kernel modules<br>
	 * <i>native declaration : /usr/include/sys/time.h:229</i><br>
	 * enum values
	 */
	public static interface ftdi_module_detach_mode {
		/** <i>native declaration : /usr/include/sys/time.h:231</i> */
		public static final int AUTO_DETACH_SIO_MODULE = 0;
		/** <i>native declaration : /usr/include/sys/time.h:232</i> */
		public static final int DONT_DETACH_SIO_MODULE = 1;
	};
	/**
	 * List all handled EEPROM values.<br>
	 * Append future new values only at the end to provide API/ABI stability<br>
	 * <i>native declaration : /usr/include/sys/time.h:424</i><br>
	 * enum values
	 */
	public static interface ftdi_eeprom_value {
		/** <i>native declaration : /usr/include/sys/time.h:426</i> */
		public static final int VENDOR_ID = 0;
		/** <i>native declaration : /usr/include/sys/time.h:427</i> */
		public static final int PRODUCT_ID = 1;
		/** <i>native declaration : /usr/include/sys/time.h:428</i> */
		public static final int SELF_POWERED = 2;
		/** <i>native declaration : /usr/include/sys/time.h:429</i> */
		public static final int REMOTE_WAKEUP = 3;
		/** <i>native declaration : /usr/include/sys/time.h:430</i> */
		public static final int IS_NOT_PNP = 4;
		/** <i>native declaration : /usr/include/sys/time.h:431</i> */
		public static final int SUSPEND_DBUS7 = 5;
		/** <i>native declaration : /usr/include/sys/time.h:432</i> */
		public static final int IN_IS_ISOCHRONOUS = 6;
		/** <i>native declaration : /usr/include/sys/time.h:433</i> */
		public static final int OUT_IS_ISOCHRONOUS = 7;
		/** <i>native declaration : /usr/include/sys/time.h:434</i> */
		public static final int SUSPEND_PULL_DOWNS = 8;
		/** <i>native declaration : /usr/include/sys/time.h:435</i> */
		public static final int USE_SERIAL = 9;
		/** <i>native declaration : /usr/include/sys/time.h:436</i> */
		public static final int USB_VERSION = 10;
		/** <i>native declaration : /usr/include/sys/time.h:437</i> */
		public static final int USE_USB_VERSION = 11;
		/** <i>native declaration : /usr/include/sys/time.h:438</i> */
		public static final int MAX_POWER = 12;
		/** <i>native declaration : /usr/include/sys/time.h:439</i> */
		public static final int CHANNEL_A_TYPE = 13;
		/** <i>native declaration : /usr/include/sys/time.h:440</i> */
		public static final int CHANNEL_B_TYPE = 14;
		/** <i>native declaration : /usr/include/sys/time.h:441</i> */
		public static final int CHANNEL_A_DRIVER = 15;
		/** <i>native declaration : /usr/include/sys/time.h:442</i> */
		public static final int CHANNEL_B_DRIVER = 16;
		/** <i>native declaration : /usr/include/sys/time.h:443</i> */
		public static final int CBUS_FUNCTION_0 = 17;
		/** <i>native declaration : /usr/include/sys/time.h:444</i> */
		public static final int CBUS_FUNCTION_1 = 18;
		/** <i>native declaration : /usr/include/sys/time.h:445</i> */
		public static final int CBUS_FUNCTION_2 = 19;
		/** <i>native declaration : /usr/include/sys/time.h:446</i> */
		public static final int CBUS_FUNCTION_3 = 20;
		/** <i>native declaration : /usr/include/sys/time.h:447</i> */
		public static final int CBUS_FUNCTION_4 = 21;
		/** <i>native declaration : /usr/include/sys/time.h:448</i> */
		public static final int CBUS_FUNCTION_5 = 22;
		/** <i>native declaration : /usr/include/sys/time.h:449</i> */
		public static final int CBUS_FUNCTION_6 = 23;
		/** <i>native declaration : /usr/include/sys/time.h:450</i> */
		public static final int CBUS_FUNCTION_7 = 24;
		/** <i>native declaration : /usr/include/sys/time.h:451</i> */
		public static final int CBUS_FUNCTION_8 = 25;
		/** <i>native declaration : /usr/include/sys/time.h:452</i> */
		public static final int CBUS_FUNCTION_9 = 26;
		/** <i>native declaration : /usr/include/sys/time.h:453</i> */
		public static final int HIGH_CURRENT = 27;
		/** <i>native declaration : /usr/include/sys/time.h:454</i> */
		public static final int HIGH_CURRENT_A = 28;
		/** <i>native declaration : /usr/include/sys/time.h:455</i> */
		public static final int HIGH_CURRENT_B = 29;
		/** <i>native declaration : /usr/include/sys/time.h:456</i> */
		public static final int INVERT = 30;
		/** <i>native declaration : /usr/include/sys/time.h:457</i> */
		public static final int GROUP0_DRIVE = 31;
		/** <i>native declaration : /usr/include/sys/time.h:458</i> */
		public static final int GROUP0_SCHMITT = 32;
		/** <i>native declaration : /usr/include/sys/time.h:459</i> */
		public static final int GROUP0_SLEW = 33;
		/** <i>native declaration : /usr/include/sys/time.h:460</i> */
		public static final int GROUP1_DRIVE = 34;
		/** <i>native declaration : /usr/include/sys/time.h:461</i> */
		public static final int GROUP1_SCHMITT = 35;
		/** <i>native declaration : /usr/include/sys/time.h:462</i> */
		public static final int GROUP1_SLEW = 36;
		/** <i>native declaration : /usr/include/sys/time.h:463</i> */
		public static final int GROUP2_DRIVE = 37;
		/** <i>native declaration : /usr/include/sys/time.h:464</i> */
		public static final int GROUP2_SCHMITT = 38;
		/** <i>native declaration : /usr/include/sys/time.h:465</i> */
		public static final int GROUP2_SLEW = 39;
		/** <i>native declaration : /usr/include/sys/time.h:466</i> */
		public static final int GROUP3_DRIVE = 40;
		/** <i>native declaration : /usr/include/sys/time.h:467</i> */
		public static final int GROUP3_SCHMITT = 41;
		/** <i>native declaration : /usr/include/sys/time.h:468</i> */
		public static final int GROUP3_SLEW = 42;
		/** <i>native declaration : /usr/include/sys/time.h:469</i> */
		public static final int CHIP_SIZE = 43;
		/** <i>native declaration : /usr/include/sys/time.h:470</i> */
		public static final int CHIP_TYPE = 44;
		/** <i>native declaration : /usr/include/sys/time.h:471</i> */
		public static final int POWER_SAVE = 45;
		/** <i>native declaration : /usr/include/sys/time.h:472</i> */
		public static final int CLOCK_POLARITY = 46;
		/** <i>native declaration : /usr/include/sys/time.h:473</i> */
		public static final int DATA_ORDER = 47;
		/** <i>native declaration : /usr/include/sys/time.h:474</i> */
		public static final int FLOW_CONTROL = 48;
		/** <i>native declaration : /usr/include/sys/time.h:475</i> */
		public static final int CHANNEL_C_DRIVER = 49;
		/** <i>native declaration : /usr/include/sys/time.h:476</i> */
		public static final int CHANNEL_D_DRIVER = 50;
		/** <i>native declaration : /usr/include/sys/time.h:477</i> */
		public static final int CHANNEL_A_RS485 = 51;
		/** <i>native declaration : /usr/include/sys/time.h:478</i> */
		public static final int CHANNEL_B_RS485 = 52;
		/** <i>native declaration : /usr/include/sys/time.h:479</i> */
		public static final int CHANNEL_C_RS485 = 53;
		/** <i>native declaration : /usr/include/sys/time.h:480</i> */
		public static final int CHANNEL_D_RS485 = 54;
	};
	/**
	 * <i>native declaration : /usr/include/sys/time.h:499</i><br>
	 * enum values
	 */
	public static interface ftdi_cbus_func {
		/** <i>native declaration : /usr/include/sys/time.h:500</i> */
		public static final int CBUS_TXDEN = 0;
		/** <i>native declaration : /usr/include/sys/time.h:500</i> */
		public static final int CBUS_PWREN = 1;
		/** <i>native declaration : /usr/include/sys/time.h:500</i> */
		public static final int CBUS_RXLED = 2;
		/** <i>native declaration : /usr/include/sys/time.h:500</i> */
		public static final int CBUS_TXLED = 3;
		/** <i>native declaration : /usr/include/sys/time.h:500</i> */
		public static final int CBUS_TXRXLED = 4;
		/** <i>native declaration : /usr/include/sys/time.h:501</i> */
		public static final int CBUS_SLEEP = 5;
		/** <i>native declaration : /usr/include/sys/time.h:501</i> */
		public static final int CBUS_CLK48 = 6;
		/** <i>native declaration : /usr/include/sys/time.h:501</i> */
		public static final int CBUS_CLK24 = 7;
		/** <i>native declaration : /usr/include/sys/time.h:501</i> */
		public static final int CBUS_CLK12 = 8;
		/** <i>native declaration : /usr/include/sys/time.h:501</i> */
		public static final int CBUS_CLK6 = 9;
		/** <i>native declaration : /usr/include/sys/time.h:502</i> */
		public static final int CBUS_IOMODE = 0xa;
		/** <i>native declaration : /usr/include/sys/time.h:502</i> */
		public static final int CBUS_BB_WR = 0xb;
		/** <i>native declaration : /usr/include/sys/time.h:502</i> */
		public static final int CBUS_BB_RD = 0xc;
		/** <i>native declaration : /usr/include/sys/time.h:502</i> */
		public static final int CBUS_BB = 0xd;
	};
	/**
	 * <i>native declaration : /usr/include/sys/time.h:504</i><br>
	 * enum values
	 */
	public static interface ftdi_cbush_func {
		/** <i>native declaration : /usr/include/sys/time.h:505</i> */
		public static final int CBUSH_TRISTATE = 0;
		/** <i>native declaration : /usr/include/sys/time.h:505</i> */
		public static final int CBUSH_RXLED = 1;
		/** <i>native declaration : /usr/include/sys/time.h:505</i> */
		public static final int CBUSH_TXLED = 2;
		/** <i>native declaration : /usr/include/sys/time.h:505</i> */
		public static final int CBUSH_TXRXLED = 3;
		/** <i>native declaration : /usr/include/sys/time.h:505</i> */
		public static final int CBUSH_PWREN = 4;
		/** <i>native declaration : /usr/include/sys/time.h:506</i> */
		public static final int CBUSH_SLEEP = 5;
		/** <i>native declaration : /usr/include/sys/time.h:506</i> */
		public static final int CBUSH_DRIVE_0 = 6;
		/** <i>native declaration : /usr/include/sys/time.h:506</i> */
		public static final int CBUSG_DRIVE1 = 7;
		/** <i>native declaration : /usr/include/sys/time.h:506</i> */
		public static final int CBUSH_IOMODE = 8;
		/** <i>native declaration : /usr/include/sys/time.h:506</i> */
		public static final int CBUSH_TXDEN = 9;
		/** <i>native declaration : /usr/include/sys/time.h:507</i> */
		public static final int CBUSH_CLK30 = 0xa;
		/** <i>native declaration : /usr/include/sys/time.h:507</i> */
		public static final int CBUSH_CLK15 = 0xb;
		/** <i>native declaration : /usr/include/sys/time.h:507</i> */
		public static final int CBUSH_CLK7_5 = 0xc;
	};
	public static final int MPSSE_LSB = (int)0x08;
	public static final int READ_EXTENDED = (int)0x91;
	public static final int SIO_XON_XOFF_HS = (int)(0x4 << 8);
	public static final int SIO_RESET_SIO = (int)0;
	public static final int DIS_ADAPTIVE = (int)0x97;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_XOPEN2K = (int)1;
	/** <i>native declaration : /usr/include/bits/wchar.h</i> */
	public static final int __WCHAR_MIN = (int)(-(2147483647) - 1);
	public static final int EN_DIV_5 = (int)0x8b;
	public static final int WAIT_ON_HIGH = (int)0x88;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __GLIBC_MINOR__ = (int)15;
	public static final int SIO_GET_LATENCY_TIMER_REQUEST = (int)0x0A;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __GLIBC_HAVE_LONG_LONG = (int)1;
	public static final int SIO_SET_ERROR_CHAR_REQUEST = (int)0x07;
	public static final int MPSSE_BITMODE = (int)0x02;
	public static final int LOOPBACK_END = (int)0x85;
	public static final int CHANNEL_IS_UART = (int)0x0;
	public static final int DRIVE_OPEN_COLLECTOR = (int)0x9e;
	public static final int SIO_DTR_DSR_HS = (int)(0x2 << 8);
	public static final int SIO_SET_MODEM_CTRL_REQUEST = (int)1;
	public static final int DRIVER_VCP = (int)0x08;
	public static final int INVERT_RI = (int)0x80;
	public static final int WAIT_ON_LOW = (int)0x89;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _FEATURES_H = (int)1;
	/** <i>native declaration : /usr/include/bits/wordsize.h</i> */
	public static final int __WORDSIZE = (int)64;
	/** <i>native declaration : /usr/include/time.h</i> */
	public static final int __time_t_defined = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX2 = (int)1;
	/** <i>native declaration : /usr/include/bits/predefs.h</i> */
	public static final int __STDC_IEC_559__ = (int)1;
	public static final int SIO_RESET_PURGE_RX = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_XOPEN2K8 = (int)1;
	public static final int SIO_SET_BITMODE_REQUEST = (int)0x0B;
	public static final int SIO_SET_EVENT_CHAR_REQUEST = (int)0x06;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_ATFILE = (int)1;
	public static final int SIO_SET_RTS_MASK = (int)0x2;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __GLIBC__ = (int)2;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_FORTIFY_LEVEL = (int)0;
	/** <i>native declaration : /usr/include/bits/time.h</i> */
	public static final int _STRUCT_TIMEVAL = (int)1;
	public static final int MPSSE_WRITE_NEG = (int)0x01;
	/** <i>native declaration : /usr/include/bits/wchar.h</i> */
	public static final int _BITS_WCHAR_H = (int)1;
	public static final int USE_SERIAL_NUM = (int)0x08;
	public static final int SIO_SET_RTS_HIGH = (int)(2 | (0x2 << 8));
	public static final int SIO_SET_DTR_MASK = (int)0x1;
	public static final int SIO_POLL_MODEM_STATUS_REQUEST = (int)0x05;
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int _STDINT_H = (int)1;
	public static final int MPSSE_DO_WRITE = (int)0x10;
	public static final int DRIVE_16MA = (int)3;
	public static final int SET_BITS_LOW = (int)0x80;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX199309 = (int)1;
	public static final int INVERT_DSR = (int)0x20;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX199506 = (int)1;
	public static final int SIO_SET_DATA = (int)4;
	public static final int USE_USB_VERSION_BIT = (int)0x10;
	public static final int SIO_SET_LATENCY_TIMER_REQUEST = (int)0x09;
	public static final int WRITE_SHORT = (int)0x92;
	public static final int GET_BITS_HIGH = (int)0x83;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX_IMPLICITLY = (int)1;
	public static final int SIO_MODEM_CTRL = (int)1;
	public static final int CLK_BITS = (int)0x8e;
//	public static final Pointer FTDI_URB_USERCONTEXT_COOKIE = (Pointer)0x1;
	public static final int SIO_SET_DTR_LOW = (int)(0 | (0x1 << 8));
	public static final int SIO_SET_BAUD_RATE = (int)3;
	public static final int WRITE_EXTENDED = (int)0x93;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_BSD = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_MISC = (int)1;
	public static final int INVERT_DTR = (int)0x10;
	public static final int INVERT_CTS = (int)0x08;
	public static final int SLOW_SLEW = (int)4;
	public static final int CHANNEL_IS_FIFO = (int)0x1;
	public static final int FT1284_FLOW_CONTROL = (int)0x04;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __GNU_LIBRARY__ = (int)6;
	public static final int SIO_SET_DTR_HIGH = (int)(1 | (0x1 << 8));
	public static final int SIO_READ_EEPROM_REQUEST = (int)0x90;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_ANSI = (int)1;
	public static final int SIO_SET_FLOW_CTRL = (int)2;
	public static final int INVERT_RXD = (int)0x02;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _SVID_SOURCE = (int)1;
	public static final int DIS_3_PHASE = (int)0x8d;
	/** <i>native declaration : /usr/include/bits/wchar.h</i> */
	public static final int __WCHAR_MAX = (int)(2147483647);
	public static final int INVERT_TXD = (int)0x01;
	/** <i>native declaration : /usr/include/sys/select.h</i> */
	public static final int _SYS_SELECT_H = (int)1;
	public static final int CLK_BYTES_OR_LOW = (int)0x0d;
	public static final int IS_SCHMITT = (int)8;
	public static final int EN_ADAPTIVE = (int)0x96;
	public static final int SIO_SET_BAUDRATE_REQUEST = (int)3;
	public static final int DRIVE_8MA = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _BSD_SOURCE = (int)1;
	public static final int CHANNEL_IS_CPU = (int)0x4;
	public static final int SIO_SET_RTS_LOW = (int)(0 | (0x2 << 8));
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX = (int)1;
	/** <i>native declaration : /usr/include/bits/sigset.h</i> */
	public static final int _SIGSET_H_types = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_SVID = (int)1;
	public static final int DRIVE_12MA = (int)2;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_ISOC99 = (int)1;
	public static final int LOOPBACK_START = (int)0x84;
	public static final int SIO_SET_DATA_REQUEST = (int)4;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_ISOC95 = (int)1;
	public static final int SEND_IMMEDIATE = (int)0x87;
	public static final int CLK_WAIT_LOW = (int)0x95;
	public static final int INVERT_DCD = (int)0x40;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _POSIX_SOURCE = (int)1;
	public static final int SIO_DISABLE_FLOW_CTRL = (int)0x0;
	public static final int CHANNEL_IS_RS485 = (int)0x10;
	public static final int SUSPEND_DBUS7_BIT = (int)0x80;
	public static final int DIS_DIV_5 = (int)0x8a;
	public static final int FT1284_DATA_LSB = (int)0x02;
	public static final int EN_3_PHASE = (int)0x8c;
	public static final int POWER_SAVE_DISABLE_H = (int)0x80;
	/** <i>native declaration : /usr/include/sys/select.h</i> */
	public static final int FD_SETSIZE = (int)1024;
	public static final int SIO_RTS_CTS_HS = (int)(0x1 << 8);
	public static final int SET_BITS_HIGH = (int)0x82;
	public static final int MPSSE_READ_NEG = (int)0x04;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __STDC_ISO_10646__ = (int)200009;
	public static final int CHANNEL_IS_FT1284 = (int)0x8;
	public static final int MPSSE_DO_READ = (int)0x20;
	/** <i>native declaration : /usr/include/sys/cdefs.h</i> */
	public static final int _SYS_CDEFS_H = (int)1;
	public static final int CLK_BYTES = (int)0x8f;
	/** <i>native declaration : /usr/include/bits/predefs.h</i> */
	public static final int __STDC_IEC_559_COMPLEX__ = (int)1;
	public static final int SIO_ERASE_EEPROM_REQUEST = (int)0x92;
	public static final int SIO_WRITE_EEPROM_REQUEST = (int)0x91;
	public static final int DRIVE_4MA = (int)0;
	public static final int INVERT_RTS = (int)0x04;
	public static final int CLK_BYTES_OR_HIGH = (int)0x9c;
	public static final int TCK_DIVISOR = (int)0x86;
	/** <i>native declaration : /usr/include/bits/typesizes.h</i> */
	public static final int _BITS_TYPESIZES_H = (int)1;
	public static final int HIGH_CURRENT_DRIVE = (int)0x10;
	public static final int HIGH_CURRENT_DRIVE_R = (int)0x04;
	/** <i>native declaration : /usr/include/sys/time.h</i> */
	public static final int _SYS_TIME_H = (int)1;
	public static final int SIO_RESET = (int)0;
	public static final int CLK_WAIT_HIGH = (int)0x94;
	public static final int SIO_READ_PINS_REQUEST = (int)0x0C;
	public static final int SIO_SET_FLOW_CTRL_REQUEST = (int)2;
	public static final int SIO_RESET_REQUEST = (int)0;
	public static final int SIO_RESET_PURGE_TX = (int)2;
	/** <i>native declaration : /usr/include/bits/types.h</i> */
	public static final int _BITS_TYPES_H = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _ATFILE_SOURCE = (int)1;
	/** <i>native declaration : /usr/include/bits/typesizes.h</i> */
	public static final int __FD_SETSIZE = (int)1024;
	public static final int DRIVER_VCPH = (int)0x10;
	public static final int MPSSE_WRITE_TMS = (int)0x40;
	public static final int GET_BITS_LOW = (int)0x81;
	public static final int FT1284_CLK_IDLE_STATE = (int)0x01;
	public static final int READ_SHORT = (int)0x90;
	/** <i>native declaration : /usr/include/bits/wordsize.h</i> */
	public static final int __WORDSIZE_COMPAT32 = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _POSIX_C_SOURCE = (int)200809;
	public static final int CHANNEL_IS_OPTO = (int)0x2;
	/** <i>native declaration : /usr/include/sys/time.h:573</i> */
	public interface FTDIStreamCallback extends Callback {
		int apply(Pointer buffer, int length, FTDIProgressInfo progress, Pointer userdata);
	};
	/**
	 * Check the first NFDS descriptors each in READFDS (if not NULL) for read<br>
	 * readiness, in WRITEFDS (if not NULL) for write readiness, and in EXCEPTFDS<br>
	 * (if not NULL) for exceptional conditions.  If TIMEOUT is not NULL, time out<br>
	 * after waiting the interval specified therein.  Returns the number of ready<br>
	 * descriptors, or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int select(int, fd_set*, fd_set*, fd_set*, timeval*)</code><br>
	 * <i>native declaration : /usr/include/sys/select.h:61</i>
	 */
	int select(int __nfds, fd_set __readfds, fd_set __writefds, fd_set __exceptfds, timeval __timeout);
	/**
	 * Same as above only that the TIMEOUT value is given with higher<br>
	 * resolution and a sigmask which is been set temporarily.  This version<br>
	 * should be used.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int pselect(int, fd_set*, fd_set*, fd_set*, timespec*, const __sigset_t*)</code><br>
	 * <i>native declaration : /usr/include/sys/select.h:73</i>
	 */
	int pselect(int __nfds, fd_set __readfds, fd_set __writefds, fd_set __exceptfds, FtdiLibrary.timespec __timeout, __sigset_t __sigmask);
	/**
	 * Get the current time of day and timezone information,<br>
	 * putting it into *TV and *TZ.  If TZ is NULL, *TZ is not filled.<br>
	 * Returns 0 on success, -1 on errors.<br>
	 * NOTE: This form of timezone information is obsolete.<br>
	 * Use the functions and variables declared in <time.h> instead.<br>
	 * Original signature : <code>int gettimeofday(timeval*, __timezone_ptr_t)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:70</i>
	 */
	int gettimeofday(timeval __tv, timezone __tz);
	/**
	 * Set the current time of day and timezone information.<br>
	 * This call is restricted to the super-user.<br>
	 * Original signature : <code>int settimeofday(timeval*, timezone*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:76</i>
	 */
	int settimeofday(timeval __tv, timezone __tz);
	/**
	 * Adjust the current time of day by the amount in DELTA.<br>
	 * If OLDDELTA is not NULL, it is filled in with the amount<br>
	 * of time adjustment remaining to be done from the last `adjtime' call.<br>
	 * This call is restricted to the super-user.<br>
	 * Original signature : <code>int adjtime(timeval*, timeval*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:84</i>
	 */
	int adjtime(timeval __delta, timeval __olddelta);
	/**
	 * Set *VALUE to the current setting of timer WHICH.<br>
	 * Return 0 on success, -1 on errors.<br>
	 * Original signature : <code>int getitimer(__itimer_which_t, itimerval*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:124</i>
	 */
	int getitimer(int __which, itimerval __value);
	/**
	 * Set the timer WHICH to *NEW.  If OLD is not NULL,<br>
	 * set *OLD to the old value of timer WHICH.<br>
	 * Returns 0 on success, -1 on errors.<br>
	 * Original signature : <code>int setitimer(__itimer_which_t, itimerval*, itimerval*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:130</i>
	 */
	int setitimer(int __which, itimerval __new, itimerval __old);
	/**
	 * Change the access time of FILE to TVP[0] and the modification time of<br>
	 * FILE to TVP[1].  If TVP is a null pointer, use the current time instead.<br>
	 * Returns 0 on success, -1 on errors.<br>
	 * Original signature : <code>int utimes(__const char*, timeval[2])</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:137</i><br>
	 * @deprecated use the safer methods {@link #utimes(java.lang.String, ftdi.timeval[])} and {@link #utimes(com.sun.jna.Pointer, ftdi.timeval[])} instead
	 */
	@Deprecated 
	int utimes(Pointer __file, Pointer __tvp);
	/**
	 * Change the access time of FILE to TVP[0] and the modification time of<br>
	 * FILE to TVP[1].  If TVP is a null pointer, use the current time instead.<br>
	 * Returns 0 on success, -1 on errors.<br>
	 * Original signature : <code>int utimes(__const char*, timeval[2])</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:137</i>
	 */
	int utimes(String __file, timeval __tvp[]);
	/**
	 * Change the access time of FILE to TVP[0] and the modification time of<br>
	 * FILE to TVP[1].  If TVP is a null pointer, use the current time instead.<br>
	 * Returns 0 on success, -1 on errors.<br>
	 * Original signature : <code>int utimes(__const char*, timeval[2])</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:137</i>
	 */
	int utimes(Pointer __file, timeval __tvp[]);
	/**
	 * Same as `utimes', but does not follow symbolic links.<br>
	 * Original signature : <code>int lutimes(__const char*, timeval[2])</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:142</i><br>
	 * @deprecated use the safer methods {@link #lutimes(java.lang.String, ftdi.timeval[])} and {@link #lutimes(com.sun.jna.Pointer, ftdi.timeval[])} instead
	 */
	@Deprecated 
	int lutimes(Pointer __file, Pointer __tvp);
	/**
	 * Same as `utimes', but does not follow symbolic links.<br>
	 * Original signature : <code>int lutimes(__const char*, timeval[2])</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:142</i>
	 */
	int lutimes(String __file, timeval __tvp[]);
	/**
	 * Same as `utimes', but does not follow symbolic links.<br>
	 * Original signature : <code>int lutimes(__const char*, timeval[2])</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:142</i>
	 */
	int lutimes(Pointer __file, timeval __tvp[]);
	/**
	 * Same as `utimes', but takes an open file descriptor instead of a name.<br>
	 * Original signature : <code>int futimes(int, timeval[2])</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:146</i><br>
	 * @deprecated use the safer method {@link #futimes(int, ftdi.timeval[])} instead
	 */
	@Deprecated 
	int futimes(int __fd, Pointer __tvp);
	/**
	 * Same as `utimes', but takes an open file descriptor instead of a name.<br>
	 * Original signature : <code>int futimes(int, timeval[2])</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:146</i>
	 */
	int futimes(int __fd, timeval __tvp[]);
	/**
	 * Original signature : <code>int ftdi_init(ftdi_context*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:599</i>
	 */
	int ftdi_init(ftdi_context ftdi);
	/**
	 * Original signature : <code>ftdi_context* ftdi_new()</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:600</i>
	 */
	ftdi_context ftdi_new();
	/**
	 * Original signature : <code>int ftdi_set_interface(ftdi_context*, ftdi_interface)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:601</i>
	 */
	int ftdi_set_interface(ftdi_context ftdi, int interface$);
	/**
	 * Original signature : <code>void ftdi_deinit(ftdi_context*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:603</i>
	 */
	void ftdi_deinit(ftdi_context ftdi);
	/**
	 * Original signature : <code>void ftdi_free(ftdi_context*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:604</i>
	 */
	void ftdi_free(ftdi_context ftdi);
	/**
	 * Original signature : <code>void ftdi_set_usbdev(ftdi_context*, libusb_device_handle*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:605</i>
	 */
	void ftdi_set_usbdev(ftdi_context ftdi, FtdiLibrary.libusb_device_handle usbdev);
	/**
	 * Original signature : <code>ftdi_version_info ftdi_get_library_version()</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:607</i>
	 */
	ByValue ftdi_get_library_version();
	/**
	 * Original signature : <code>int ftdi_usb_find_all(ftdi_context*, ftdi_device_list**, int, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:609</i><br>
	 * @deprecated use the safer method {@link #ftdi_usb_find_all(ftdi.ftdi_context, ftdi.ftdi_device_list.ByReference[], int, int)} instead
	 */
	@Deprecated 
	int ftdi_usb_find_all(ftdi_context ftdi, PointerByReference devlist, int vendor, int product);
	/**
	 * Original signature : <code>int ftdi_usb_find_all(ftdi_context*, ftdi_device_list**, int, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:609</i>
	 */
	int ftdi_usb_find_all(ftdi_context ftdi, ftdi_device_list.ByReference devlist, int vendor, int product);
	/**
	 * Original signature : <code>void ftdi_list_free(ftdi_device_list**)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:611</i><br>
	 * @deprecated use the safer method {@link #ftdi_list_free(ftdi.ftdi_device_list.ByReference[])} instead
	 */
	@Deprecated 
	void ftdi_list_free(PointerByReference devlist);
	/**
	 * Original signature : <code>void ftdi_list_free(ftdi_device_list**)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:611</i>
	 */
	void ftdi_list_free(ftdi_device_list.ByReference devlist[]);
	/**
	 * Original signature : <code>void ftdi_list_free2(ftdi_device_list*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:612</i>
	 */
	void ftdi_list_free2(ftdi_device_list devlist);
	/**
	 * Original signature : <code>int ftdi_usb_get_strings(ftdi_context*, libusb_device*, char*, int, char*, int, char*, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:613</i><br>
	 * @deprecated use the safer methods {@link #ftdi_usb_get_strings(ftdi.ftdi_context, ftdi.FtdiLibrary.libusb_device, java.nio.ByteBuffer, int, java.nio.ByteBuffer, int, java.nio.ByteBuffer, int)} and {@link #ftdi_usb_get_strings(ftdi.ftdi_context, ftdi.FtdiLibrary.libusb_device, com.sun.jna.Pointer, int, com.sun.jna.Pointer, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ftdi_usb_get_strings(ftdi_context ftdi, FtdiLibrary.libusb_device dev, Pointer manufacturer, int mnf_len, Pointer description, int desc_len, Pointer serial, int serial_len);
	/**
	 * Original signature : <code>int ftdi_usb_get_strings(ftdi_context*, libusb_device*, char*, int, char*, int, char*, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:613</i>
	 */
	int ftdi_usb_get_strings(ftdi_context ftdi, FtdiLibrary.libusb_device dev, ByteBuffer manufacturer, int mnf_len, ByteBuffer description, int desc_len, ByteBuffer serial, int serial_len);
	/**
	 * Original signature : <code>int ftdi_usb_open(ftdi_context*, int, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:618</i>
	 */
	int ftdi_usb_open(ftdi_context ftdi, int vendor, int product);
	/**
	 * Original signature : <code>int ftdi_usb_open_desc(ftdi_context*, int, int, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:619</i><br>
	 * @deprecated use the safer methods {@link #ftdi_usb_open_desc(ftdi.ftdi_context, int, int, java.lang.String, java.lang.String)} and {@link #ftdi_usb_open_desc(ftdi.ftdi_context, int, int, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ftdi_usb_open_desc(ftdi_context ftdi, int vendor, int product, Pointer description, Pointer serial);
	/**
	 * Original signature : <code>int ftdi_usb_open_desc(ftdi_context*, int, int, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:619</i>
	 */
	int ftdi_usb_open_desc(ftdi_context ftdi, int vendor, int product, String description, String serial);
	/**
	 * Original signature : <code>int ftdi_usb_open_desc_index(ftdi_context*, int, int, const char*, const char*, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:621</i><br>
	 * @deprecated use the safer methods {@link #ftdi_usb_open_desc_index(ftdi.ftdi_context, int, int, java.lang.String, java.lang.String, int)} and {@link #ftdi_usb_open_desc_index(ftdi.ftdi_context, int, int, com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ftdi_usb_open_desc_index(ftdi_context ftdi, int vendor, int product, Pointer description, Pointer serial, int index);
	/**
	 * Original signature : <code>int ftdi_usb_open_desc_index(ftdi_context*, int, int, const char*, const char*, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:621</i>
	 */
	int ftdi_usb_open_desc_index(ftdi_context ftdi, int vendor, int product, String description, String serial, int index);
	/**
	 * Original signature : <code>int ftdi_usb_open_dev(ftdi_context*, libusb_device*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:623</i>
	 */
	int ftdi_usb_open_dev(ftdi_context ftdi, FtdiLibrary.libusb_device dev);
	/**
	 * Original signature : <code>int ftdi_usb_open_string(ftdi_context*, const char*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:624</i><br>
	 * @deprecated use the safer methods {@link #ftdi_usb_open_string(ftdi.ftdi_context, java.lang.String)} and {@link #ftdi_usb_open_string(ftdi.ftdi_context, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ftdi_usb_open_string(ftdi_context ftdi, Pointer description);
	/**
	 * Original signature : <code>int ftdi_usb_open_string(ftdi_context*, const char*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:624</i>
	 */
	int ftdi_usb_open_string(ftdi_context ftdi, String description);
	/**
	 * Original signature : <code>int ftdi_usb_close(ftdi_context*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:626</i>
	 */
	int ftdi_usb_close(ftdi_context ftdi);
	/**
	 * Original signature : <code>int ftdi_usb_reset(ftdi_context*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:627</i>
	 */
	int ftdi_usb_reset(ftdi_context ftdi);
	/**
	 * Original signature : <code>int ftdi_usb_purge_rx_buffer(ftdi_context*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:628</i>
	 */
	int ftdi_usb_purge_rx_buffer(ftdi_context ftdi);
	/**
	 * Original signature : <code>int ftdi_usb_purge_tx_buffer(ftdi_context*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:629</i>
	 */
	int ftdi_usb_purge_tx_buffer(ftdi_context ftdi);
	/**
	 * Original signature : <code>int ftdi_usb_purge_buffers(ftdi_context*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:630</i>
	 */
	int ftdi_usb_purge_buffers(ftdi_context ftdi);
	/**
	 * Original signature : <code>int ftdi_set_baudrate(ftdi_context*, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:632</i>
	 */
	int ftdi_set_baudrate(ftdi_context ftdi, int baudrate);
	/**
	 * Original signature : <code>int ftdi_set_line_property(ftdi_context*, ftdi_bits_type, ftdi_stopbits_type, ftdi_parity_type)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:633</i>
	 */
	int ftdi_set_line_property(ftdi_context ftdi, int bits, int sbit, int parity);
	/**
	 * Original signature : <code>int ftdi_set_line_property2(ftdi_context*, ftdi_bits_type, ftdi_stopbits_type, ftdi_parity_type, ftdi_break_type)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:635</i>
	 */
	int ftdi_set_line_property2(ftdi_context ftdi, int bits, int sbit, int parity, int break_type);
	/**
	 * Original signature : <code>int ftdi_read_data(ftdi_context*, unsigned char*, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:639</i><br>
	 * @deprecated use the safer methods {@link #ftdi_read_data(ftdi.ftdi_context, java.nio.ByteBuffer, int)} and {@link #ftdi_read_data(ftdi.ftdi_context, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ftdi_read_data(ftdi_context ftdi, Pointer buf, int size);
	/**
	 * Original signature : <code>int ftdi_read_data(ftdi_context*, unsigned char*, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:639</i>
	 */
	int ftdi_read_data(ftdi_context ftdi, ByteBuffer buf, int size);
	/**
	 * Original signature : <code>int ftdi_read_data_set_chunksize(ftdi_context*, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:640</i>
	 */
	int ftdi_read_data_set_chunksize(ftdi_context ftdi, int chunksize);
	/**
	 * Original signature : <code>int ftdi_read_data_get_chunksize(ftdi_context*, unsigned int*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:641</i><br>
	 * @deprecated use the safer methods {@link #ftdi_read_data_get_chunksize(ftdi.ftdi_context, java.nio.IntBuffer)} and {@link #ftdi_read_data_get_chunksize(ftdi.ftdi_context, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int ftdi_read_data_get_chunksize(ftdi_context ftdi, IntByReference chunksize);
	/**
	 * Original signature : <code>int ftdi_read_data_get_chunksize(ftdi_context*, unsigned int*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:641</i>
	 */
	int ftdi_read_data_get_chunksize(ftdi_context ftdi, IntBuffer chunksize);
	/**
	 * Original signature : <code>int ftdi_write_data(ftdi_context*, unsigned char*, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:643</i><br>
	 * @deprecated use the safer methods {@link #ftdi_write_data(ftdi.ftdi_context, java.nio.ByteBuffer, int)} and {@link #ftdi_write_data(ftdi.ftdi_context, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ftdi_write_data(ftdi_context ftdi, Pointer buf, int size);
	/**
	 * Original signature : <code>int ftdi_write_data(ftdi_context*, unsigned char*, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:643</i>
	 */
	int ftdi_write_data(ftdi_context ftdi, ByteBuffer buf, int size);
	/**
	 * Original signature : <code>int ftdi_write_data_set_chunksize(ftdi_context*, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:644</i>
	 */
	int ftdi_write_data_set_chunksize(ftdi_context ftdi, int chunksize);
	/**
	 * Original signature : <code>int ftdi_write_data_get_chunksize(ftdi_context*, unsigned int*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:645</i><br>
	 * @deprecated use the safer methods {@link #ftdi_write_data_get_chunksize(ftdi.ftdi_context, java.nio.IntBuffer)} and {@link #ftdi_write_data_get_chunksize(ftdi.ftdi_context, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int ftdi_write_data_get_chunksize(ftdi_context ftdi, IntByReference chunksize);
	/**
	 * Original signature : <code>int ftdi_write_data_get_chunksize(ftdi_context*, unsigned int*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:645</i>
	 */
	int ftdi_write_data_get_chunksize(ftdi_context ftdi, IntBuffer chunksize);
	/**
	 * Original signature : <code>int ftdi_readstream(ftdi_context*, FTDIStreamCallback*, void*, int, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:647</i>
	 */
	int ftdi_readstream(ftdi_context ftdi, FtdiLibrary.FTDIStreamCallback callback, Pointer userdata, int packetsPerTransfer, int numTransfers);
	/**
	 * Original signature : <code>ftdi_transfer_control* ftdi_write_data_submit(ftdi_context*, unsigned char*, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:649</i><br>
	 * @deprecated use the safer methods {@link #ftdi_write_data_submit(ftdi.ftdi_context, java.nio.ByteBuffer, int)} and {@link #ftdi_write_data_submit(ftdi.ftdi_context, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	ftdi_transfer_control ftdi_write_data_submit(ftdi_context ftdi, Pointer buf, int size);
	/**
	 * Original signature : <code>ftdi_transfer_control* ftdi_write_data_submit(ftdi_context*, unsigned char*, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:649</i>
	 */
	ftdi_transfer_control ftdi_write_data_submit(ftdi_context ftdi, ByteBuffer buf, int size);
	/**
	 * Original signature : <code>ftdi_transfer_control* ftdi_read_data_submit(ftdi_context*, unsigned char*, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:651</i><br>
	 * @deprecated use the safer methods {@link #ftdi_read_data_submit(ftdi.ftdi_context, java.nio.ByteBuffer, int)} and {@link #ftdi_read_data_submit(ftdi.ftdi_context, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	ftdi_transfer_control ftdi_read_data_submit(ftdi_context ftdi, Pointer buf, int size);
	/**
	 * Original signature : <code>ftdi_transfer_control* ftdi_read_data_submit(ftdi_context*, unsigned char*, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:651</i>
	 */
	ftdi_transfer_control ftdi_read_data_submit(ftdi_context ftdi, ByteBuffer buf, int size);
	/**
	 * Original signature : <code>int ftdi_transfer_data_done(ftdi_transfer_control*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:652</i>
	 */
	int ftdi_transfer_data_done(ftdi_transfer_control tc);
	/**
	 * Original signature : <code>int ftdi_set_bitmode(ftdi_context*, unsigned char, unsigned char)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:654</i>
	 */
	int ftdi_set_bitmode(ftdi_context ftdi, byte bitmask, byte mode);
	/**
	 * Original signature : <code>int ftdi_disable_bitbang(ftdi_context*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:655</i>
	 */
	int ftdi_disable_bitbang(ftdi_context ftdi);
	/**
	 * Original signature : <code>int ftdi_read_pins(ftdi_context*, unsigned char*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:656</i><br>
	 * @deprecated use the safer methods {@link #ftdi_read_pins(ftdi.ftdi_context, java.nio.ByteBuffer)} and {@link #ftdi_read_pins(ftdi.ftdi_context, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ftdi_read_pins(ftdi_context ftdi, Pointer pins);
	/**
	 * Original signature : <code>int ftdi_read_pins(ftdi_context*, unsigned char*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:656</i>
	 */
	int ftdi_read_pins(ftdi_context ftdi, ByteBuffer pins);
	/**
	 * Original signature : <code>int ftdi_set_latency_timer(ftdi_context*, unsigned char)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:658</i>
	 */
	int ftdi_set_latency_timer(ftdi_context ftdi, byte latency);
	/**
	 * Original signature : <code>int ftdi_get_latency_timer(ftdi_context*, unsigned char*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:659</i><br>
	 * @deprecated use the safer methods {@link #ftdi_get_latency_timer(ftdi.ftdi_context, java.nio.ByteBuffer)} and {@link #ftdi_get_latency_timer(ftdi.ftdi_context, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ftdi_get_latency_timer(ftdi_context ftdi, Pointer latency);
	/**
	 * Original signature : <code>int ftdi_get_latency_timer(ftdi_context*, unsigned char*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:659</i>
	 */
	int ftdi_get_latency_timer(ftdi_context ftdi, ByteBuffer latency);
	/**
	 * Original signature : <code>int ftdi_poll_modem_status(ftdi_context*, unsigned short*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:661</i><br>
	 * @deprecated use the safer methods {@link #ftdi_poll_modem_status(ftdi.ftdi_context, java.nio.ShortBuffer)} and {@link #ftdi_poll_modem_status(ftdi.ftdi_context, com.sun.jna.ptr.ShortByReference)} instead
	 */
	@Deprecated 
	int ftdi_poll_modem_status(ftdi_context ftdi, ShortByReference status);
	/**
	 * Original signature : <code>int ftdi_poll_modem_status(ftdi_context*, unsigned short*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:661</i>
	 */
	int ftdi_poll_modem_status(ftdi_context ftdi, ShortBuffer status);
	/**
	 * flow control<br>
	 * Original signature : <code>int ftdi_setflowctrl(ftdi_context*, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:664</i>
	 */
	int ftdi_setflowctrl(ftdi_context ftdi, int flowctrl);
	/**
	 * Original signature : <code>int ftdi_setdtr_rts(ftdi_context*, int, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:665</i>
	 */
	int ftdi_setdtr_rts(ftdi_context ftdi, int dtr, int rts);
	/**
	 * Original signature : <code>int ftdi_setdtr(ftdi_context*, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:666</i>
	 */
	int ftdi_setdtr(ftdi_context ftdi, int state);
	/**
	 * Original signature : <code>int ftdi_setrts(ftdi_context*, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:667</i>
	 */
	int ftdi_setrts(ftdi_context ftdi, int state);
	/**
	 * Original signature : <code>int ftdi_set_event_char(ftdi_context*, unsigned char, unsigned char)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:669</i>
	 */
	int ftdi_set_event_char(ftdi_context ftdi, byte eventch, byte enable);
	/**
	 * Original signature : <code>int ftdi_set_error_char(ftdi_context*, unsigned char, unsigned char)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:670</i>
	 */
	int ftdi_set_error_char(ftdi_context ftdi, byte errorch, byte enable);
	/**
	 * init eeprom for the given FTDI type<br>
	 * Original signature : <code>int ftdi_eeprom_initdefaults(ftdi_context*, char*, char*, char*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:673</i><br>
	 * @deprecated use the safer methods {@link #ftdi_eeprom_initdefaults(ftdi.ftdi_context, java.nio.ByteBuffer, java.nio.ByteBuffer, java.nio.ByteBuffer)} and {@link #ftdi_eeprom_initdefaults(ftdi.ftdi_context, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ftdi_eeprom_initdefaults(ftdi_context ftdi, Pointer manufacturer, Pointer product, Pointer serial);
	/**
	 * init eeprom for the given FTDI type<br>
	 * Original signature : <code>int ftdi_eeprom_initdefaults(ftdi_context*, char*, char*, char*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:673</i>
	 */
	int ftdi_eeprom_initdefaults(ftdi_context ftdi, ByteBuffer manufacturer, ByteBuffer product, ByteBuffer serial);
	/**
	 * Original signature : <code>int ftdi_eeprom_build(ftdi_context*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:676</i>
	 */
	int ftdi_eeprom_build(ftdi_context ftdi);
	/**
	 * Original signature : <code>int ftdi_eeprom_decode(ftdi_context*, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:677</i>
	 */
	int ftdi_eeprom_decode(ftdi_context ftdi, int verbose);
	/**
	 * Original signature : <code>int ftdi_get_eeprom_value(ftdi_context*, ftdi_eeprom_value, int*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:679</i><br>
	 * @deprecated use the safer methods {@link #ftdi_get_eeprom_value(ftdi.ftdi_context, int, java.nio.IntBuffer)} and {@link #ftdi_get_eeprom_value(ftdi.ftdi_context, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int ftdi_get_eeprom_value(ftdi_context ftdi, int value_name, IntByReference value);
	/**
	 * Original signature : <code>int ftdi_get_eeprom_value(ftdi_context*, ftdi_eeprom_value, int*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:679</i>
	 */
	int ftdi_get_eeprom_value(ftdi_context ftdi, int value_name, IntBuffer value);
	/**
	 * Original signature : <code>int ftdi_set_eeprom_value(ftdi_context*, ftdi_eeprom_value, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:680</i>
	 */
	int ftdi_set_eeprom_value(ftdi_context ftdi, int value_name, int value);
	/**
	 * Original signature : <code>int ftdi_get_eeprom_buf(ftdi_context*, unsigned char*, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:682</i><br>
	 * @deprecated use the safer methods {@link #ftdi_get_eeprom_buf(ftdi.ftdi_context, java.nio.ByteBuffer, int)} and {@link #ftdi_get_eeprom_buf(ftdi.ftdi_context, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ftdi_get_eeprom_buf(ftdi_context ftdi, Pointer buf, int size);
	/**
	 * Original signature : <code>int ftdi_get_eeprom_buf(ftdi_context*, unsigned char*, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:682</i>
	 */
	int ftdi_get_eeprom_buf(ftdi_context ftdi, ByteBuffer buf, int size);
	/**
	 * Original signature : <code>int ftdi_set_eeprom_buf(ftdi_context*, const unsigned char*, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:683</i><br>
	 * @deprecated use the safer methods {@link #ftdi_set_eeprom_buf(ftdi.ftdi_context, byte[], int)} and {@link #ftdi_set_eeprom_buf(ftdi.ftdi_context, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ftdi_set_eeprom_buf(ftdi_context ftdi, Pointer buf, int size);
	/**
	 * Original signature : <code>int ftdi_set_eeprom_buf(ftdi_context*, const unsigned char*, int)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:683</i>
	 */
	int ftdi_set_eeprom_buf(ftdi_context ftdi, byte buf[], int size);
	/**
	 * Original signature : <code>int ftdi_read_eeprom(ftdi_context*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:685</i>
	 */
	int ftdi_read_eeprom(ftdi_context ftdi);
	/**
	 * Original signature : <code>int ftdi_read_chipid(ftdi_context*, unsigned int*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:686</i><br>
	 * @deprecated use the safer methods {@link #ftdi_read_chipid(ftdi.ftdi_context, java.nio.IntBuffer)} and {@link #ftdi_read_chipid(ftdi.ftdi_context, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int ftdi_read_chipid(ftdi_context ftdi, IntByReference chipid);
	/**
	 * Original signature : <code>int ftdi_read_chipid(ftdi_context*, unsigned int*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:686</i>
	 */
	int ftdi_read_chipid(ftdi_context ftdi, IntBuffer chipid);
	/**
	 * Original signature : <code>int ftdi_write_eeprom(ftdi_context*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:687</i>
	 */
	int ftdi_write_eeprom(ftdi_context ftdi);
	/**
	 * Original signature : <code>int ftdi_erase_eeprom(ftdi_context*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:688</i>
	 */
	int ftdi_erase_eeprom(ftdi_context ftdi);
	/**
	 * Original signature : <code>int ftdi_read_eeprom_location(ftdi_context*, int, unsigned short*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:690</i><br>
	 * @deprecated use the safer methods {@link #ftdi_read_eeprom_location(ftdi.ftdi_context, int, java.nio.ShortBuffer)} and {@link #ftdi_read_eeprom_location(ftdi.ftdi_context, int, com.sun.jna.ptr.ShortByReference)} instead
	 */
	@Deprecated 
	int ftdi_read_eeprom_location(ftdi_context ftdi, int eeprom_addr, ShortByReference eeprom_val);
	/**
	 * Original signature : <code>int ftdi_read_eeprom_location(ftdi_context*, int, unsigned short*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:690</i>
	 */
	int ftdi_read_eeprom_location(ftdi_context ftdi, int eeprom_addr, ShortBuffer eeprom_val);
	/**
	 * Original signature : <code>int ftdi_write_eeprom_location(ftdi_context*, int, unsigned short)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:691</i>
	 */
	int ftdi_write_eeprom_location(ftdi_context ftdi, int eeprom_addr, short eeprom_val);
	/**
	 * Original signature : <code>char* ftdi_get_error_string(ftdi_context*)</code><br>
	 * <i>native declaration : /usr/include/sys/time.h:693</i>
	 */
	String ftdi_get_error_string(ftdi_context ftdi);
	public static class libusb_device extends PointerType {
		public libusb_device(Pointer address) {
			super(address);
		}
		public libusb_device() {
			super();
		}
	};
	public static class ftdi_eeprom extends PointerType {
		public ftdi_eeprom(Pointer address) {
			super(address);
		}
		public ftdi_eeprom() {
			super();
		}
	};
	public static class libusb_context extends PointerType {
		public libusb_context(Pointer address) {
			super(address);
		}
		public libusb_context() {
			super();
		}
	};
	public static class libusb_transfer extends PointerType {
		public libusb_transfer(Pointer address) {
			super(address);
		}
		public libusb_transfer() {
			super();
		}
	};
	public static class timespec extends PointerType {
		public timespec(Pointer address) {
			super(address);
		}
		public timespec() {
			super();
		}
	};
	public static class libusb_device_handle extends PointerType {
		public libusb_device_handle(Pointer address) {
			super(address);
		}
		public libusb_device_handle() {
			super();
		}
	};
}

package ftdi;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * Provide libftdi version information<br>
 * major: Library major version<br>
 * minor: Library minor version<br>
 * micro: Currently unused, ight get used for hotfixes.<br>
 * version_str: Version as (static) string<br>
 * snapshot_str: Git snapshot version if known. Otherwise "unknown" or empty string.<br>
 * <i>native declaration : /usr/include/sys/time.h:584</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ftdi_version_info extends Structure {
	public int major;
	public int minor;
	public int micro;
	/** C type : const char* */
	public Pointer version_str;
	/** C type : const char* */
	public Pointer snapshot_str;
	public ftdi_version_info() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("major", "minor", "micro", "version_str", "snapshot_str");
	}
	/**
	 * @param version_str C type : const char*<br>
	 * @param snapshot_str C type : const char*
	 */
	public ftdi_version_info(int major, int minor, int micro, Pointer version_str, Pointer snapshot_str) {
		super();
		this.major = major;
		this.minor = minor;
		this.micro = micro;
		this.version_str = version_str;
		this.snapshot_str = snapshot_str;
	}
	public static class ByReference extends ftdi_version_info implements Structure.ByReference {
		
	};
	public static class ByValue extends ftdi_version_info implements Structure.ByValue {
		
	};
}
